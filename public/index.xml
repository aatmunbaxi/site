<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home on Aatmun Baxi</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Aatmun Baxi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Apr 2023 17:11:09 -0500</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Going Global</title>
      <link>http://localhost:1313/math/going-global/</link>
      <pubDate>Tue, 18 Apr 2023 17:11:09 -0500</pubDate>
      
      <guid>http://localhost:1313/math/going-global/</guid>
      <description></description>
    </item>
    
    <item>
      <title>「氷が効かなくなってきている」</title>
      <link>http://localhost:1313/nihongo/jojos_interesting_phrase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nihongo/jojos_interesting_phrase/</guid>
      <description>I came across the phrase「氷が行かなくなってきている」in an episode of Jojo’s Bizarre Adventure and couldn’t help but smile at it. The morphology of Japanese words is a fascinating one, and this sentence exemplifies it brilliantly. Roughly, this sentence says “the ice is becoming ineffective”, or more naturally, “the ice is becoming less effective”. The first word 「氷」, is straightforward; it means “ice”. The particle 「が」 is an indicative particle meant to direct the attention of the listener to the noun it is attached to.</description>
    </item>
    
    <item>
      <title>Astrophotos</title>
      <link>http://localhost:1313/misc/astrophotos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/misc/astrophotos/</guid>
      <description>As a fairly new astrophotographer, these images will be quite poor to the discerning eye. Artifacts like dust spots, field curvature, and star trails can be seen in pretty much all of them, among many more artifacts. Regardless, I find a lot of satisfaction in this hobby as a fascinating blend of science and art.
M101: Pinwheel Galaxy Figure 1: M101, The Pinwheel Galaxy
Details It’s been a while since I took this image, but I belive it total around 3 hours of integration</description>
    </item>
    
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/comp/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.
Having ditched evil-collection to get familiar with the vanilla emacs keybindings, I surprisingly found myself satisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I’ve adopted to meow. I chose meow for a few reasons:
Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring-meow-friendly-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/configuring-meow-friendly-latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.
Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:
Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.
Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:
Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    
    <item>
      <title>Realizing some Multiplicity-Free Fusion Rules</title>
      <link>http://localhost:1313/math/realizing_fusion_rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/math/realizing_fusion_rules/</guid>
      <description>Disclaimer: These results have not been subjected to the rigors of publication.
Fusion Rings Classifying fusion categories is a huge task&amp;ndash;likely impossible&amp;ndash;but much effort has been made to find certain invariants to help distinguish fusion categories at various levels of structure. One such invariant is the fusion ring associated to a fusion category \( \mathcal{C} \). They are one of the more useful invariants of fusion categories, though they are incomplete at determining the whole structure of the category.</description>
    </item>
    
    <item>
      <title>Solving the Magic Square in Common Lisp</title>
      <link>http://localhost:1313/computing/magic-square-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/magic-square-common-lisp/</guid>
      <description>Table of Contents The Problem Helper Functions Summing List Values Converting Between Grids and Flat Lists Grabbing Diagonals Checking Win Conditions Range Generation Pretty Printing The Solver Using the Solver The Problem The magic square problem is a typical recursion exercise given to students learning programming. Since I’ve been playing around with common lisp recently, I thought I’d use it as an excuse to learn a bit about the language.</description>
    </item>
    
    <item>
      <title>Declarative Programming for Fast Brain-to-Binary</title>
      <link>http://localhost:1313/computing/brain_to_binary_bliss_of_decla_prog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/brain_to_binary_bliss_of_decla_prog/</guid>
      <description>Recently I’ve been messing around with different programming languages and branching out beyond the C-style languages I know like C++ and Python. In my search for one to try out, I discovered Haskell, and the paradigm of functional programming as a whole.
As a mathematician by trade, the usefulness of programming was never lost on me. From my time with C++ and Python, I had developed a (not unreasonable) notion that programming was all about telling computers how to do something you want done.</description>
    </item>
    
    <item>
      <title>Quantum Computing, Braids, and Modular Categories</title>
      <link>http://localhost:1313/math/quantum_comp_and_modular_categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/math/quantum_comp_and_modular_categories/</guid>
      <description>Introduction Quantum computing (QC) is an exciting new paradigm of computation, promising exponential speedup from state-of-the-art classical algorithms in certain computing tasks. Despite vigorous research from all sides of the task, obstacles to a quantum computer architecture that is scalable and tolerant to errors remain hard to overcome.
Qubits in existing models of quantum computation (such as trapped-ion models) are sensitive to their environment. Such sensitivities of the environment make qubits liable to introducing noise that dominates the computation we’d like to measure.</description>
    </item>
    
    <item>
      <title>Solving the Magic Square in Common Lisp</title>
      <link>http://localhost:1313/comp/magic-square-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/magic-square-common-lisp/</guid>
      <description>Table of Contents The Problem Helper Functions Summing List Values Converting Between Grids and Flat Lists Grabbing Diagonals Checking Win Conditions Range Generation Pretty Printing The Solver Using the Solver The Problem The magic square problem is a typical recursion exercise given to students learning programming. Since I’ve been playing around with common lisp recently, I thought I’d use it as an excuse to learn a bit about the language.</description>
    </item>
    
    <item>
      <title>Some Theorems</title>
      <link>http://localhost:1313/misc/fav_theorems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/misc/fav_theorems/</guid>
      <description>Table of Contents Table of Contents Modular categories are not determined by their modular data Classification of commutative Frobenius algebras by TQFTs The Yoneda Lemma Modular categories are not determined by their modular data A modular category \( \mathcal{C} \) is not determined by its \( S \) and \( T \) matrices. Comments: If something seems too good to be true, it probably is.
Classification of commutative Frobenius algebras by TQFTs For a field \( k \), there is an equivalence of categories \( \mathsf{2TQFT}_k \simeq \mathsf{cFrob}_k \) of 2-dimensional topological quantum field theories and commutative Frobenius algebras.</description>
    </item>
    
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/computing/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.
For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    
    <item>
      <title>LAWRGe 2023 Notes</title>
      <link>http://localhost:1313/math/lawrge_2023_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/math/lawrge_2023_notes/</guid>
      <description>LAWRGe Workshop Info Lecture 1: Mon Jun 12 11:05:22 2023 Lecture 2: Mon Jun 12 13:04:01 2023 Lecture 3: Mon Jun 12 16:07:19 2023 Lecture 4: Mon Jun 12 18:02:13 2023 Lecture 5: Tue Jun 13 10:34:03 2023 Lecture 6: Tue Jun 13 12:44:10 2023 Lecture 7: Tue Jun 13 15:44:00 2023 Lecture 8: Tue Jun 13 18:01:16 2023 Lecture 9: Wed Jun 14 10:46:24 2023 Lecture 10: Wed Jun 14 12:48:31 2023 Lecture 11: Wed Jun 14 15:55:18 2023 Lecture 12: Wed Jun 14 18:05:37 2023 Lecture 13: Thu Jun 15 10:46:45 2023 Lecture 14: Thu Jun 15 13:05:02 2023 Lecture 15: Fri Jun 16 10:44:46 2023 LAWRGe Workshop Info Mirror symmetry and 3d topological quantum field theories (TQFTs)</description>
    </item>
    
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/comp/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.
For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    
    <item>
      <title>My DOOM Emacs Configuration</title>
      <link>http://localhost:1313/computing/doom-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/computing/doom-config/</guid>
      <description>Table of Contents Intro Housekeeping Font Theme, Appearance, General Behavior Doom Dashboard Modeline Global Appearance Custom Faces Custom Functionality Global keybindings Major Modes and Languages org-mode haskell-mode python-mode plantuml pdf-view-mode evil lsp numpydoc Packages bibtex embark org packages org-ref org-roam org-noter org-super-agenda CV Misc Packages and Behavior helm-bibtex xenops-mode yasnippets ink quiver company Intro This config file is organized by mode and/or package. Each mode has their own subsection for common configuration patterns such as keybindings, hooks, setting variables, etc.</description>
    </item>
    
  </channel>
</rss>
