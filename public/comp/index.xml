<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computing on Aatmun Baxi</title>
    <link>http://localhost:1313/comp/</link>
    <description>Recent content in Computing on Aatmun Baxi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://localhost:1313/comp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/comp/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.
Having ditched evil-collection to get familiar with the vanilla emacs keybindings, I surprisingly found myself satisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I’ve adopted to meow. I chose meow for a few reasons:
Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    
    <item>
      <title>Solving the Magic Square in Common Lisp</title>
      <link>http://localhost:1313/comp/magic-square-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/magic-square-common-lisp/</guid>
      <description>Table of Contents The Problem Helper Functions Summing List Values Converting Between Grids and Flat Lists Grabbing Diagonals Checking Win Conditions Range Generation Pretty Printing The Solver Using the Solver The Problem The magic square problem is a typical recursion exercise given to students learning programming. Since I’ve been playing around with common lisp recently, I thought I’d use it as an excuse to learn a bit about the language.</description>
    </item>
    
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/comp/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/comp/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.
For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    
  </channel>
</rss>
