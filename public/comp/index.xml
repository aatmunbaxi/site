<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computing on Aatmun Baxi</title>
    <link>http://localhost:1313/comp/</link>
    <description>Recent content in Computing on Aatmun Baxi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/comp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring meow for Friendlier LaTeX Editing</title>
      <link>http://localhost:1313/comp/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme. This article assumes some familiarity with the evil and meow modes.&#xA;evil-tex Doing Our Own Thing Inline Math Environments LaTeX Parentheses Delimiters Closing Thoughts Having ditched evil-collection to get familiar with the vanilla emacs keybindings, I surprisingly found myself satisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I’ve adopted meow.</description>
    </item>
    <item>
      <title>A meow-state for speedy org structure navigation</title>
      <link>http://localhost:1313/comp/meow_state_org_speed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/meow_state_org_speed/</guid>
      <description>TL;DR: We implement a meow-state for quick navigation of org-mode document structure.&#xA;I’ve been very pleased with my switch to the meow modal editor, but one of the downsides of it is no obvious way to use speed keys in org-mode. Namely, the meow normal state maps would clash with the speed key definitions. One could just redefine the speed keys to avoid the normal state maps, or redefine the normal state maps themselves, but that’s no fun.</description>
    </item>
    <item>
      <title>Solving the Magic Square in Common Lisp</title>
      <link>http://localhost:1313/comp/magic-square-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/magic-square-common-lisp/</guid>
      <description>Table of Contents The Problem Helper Functions Summing List Values Converting Between Grids and Flat Lists Grabbing Diagonals Checking Win Conditions Range Generation Pretty Printing The Solver Using the Solver The Problem The magic square problem is a typical recursion exercise given to students learning programming. Since I’ve been playing around with common lisp recently, I thought I’d use it as an excuse to learn a bit about the language.</description>
    </item>
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/comp/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.&#xA;For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
  </channel>
</rss>
