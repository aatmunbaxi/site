<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Aatmun Baxi</title>
    <link>http://localhost:1313/tags/emacs/</link>
    <description>Recent content in Emacs on Aatmun Baxi</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring-meow-friendly-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/configuring-meow-friendly-latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.&#xA;Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:&#xA;Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.&#xA;Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:&#xA;Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    <item>
      <title>How Emacs Helped Me Today: modus-themes and ef-themes Palettes for LaTeX</title>
      <link>http://localhost:1313/comp/how_emacs_helped_modus_ef_palette_beamer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/how_emacs_helped_modus_ef_palette_beamer/</guid>
      <description>I’m very fond of Prot’s modus-themes and ef-themes for emacs. They’re highly legible, easy on the eyes, and attractive. Recently I was making a beamer presentation for a talk I’m currently procrastinating on. For better or for worse, I thought to myself I wish I could make the PDF output have modus theme colors.&#xA;After manually reading off some colors from modus-operandi-tinted-palette into my LaTeX preamble, I remembered: Wait, this is emacs.</description>
    </item>
    <item>
      <title>Configuring meow for Friendlier LaTeX Editing</title>
      <link>http://localhost:1313/comp/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme. This article assumes some familiarity with the evil and meow modes.&#xA;evil-tex Doing Our Own Thing Inline Math Environments LaTeX Parentheses Delimiters Closing Thoughts Having ditched evil-collection to get familiar with the vanilla emacs keybindings, I surprisingly found myself satisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I’ve adopted meow.</description>
    </item>
    <item>
      <title>A meow-state for speedy org structure navigation</title>
      <link>http://localhost:1313/comp/meow_state_org_speed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/meow_state_org_speed/</guid>
      <description>TL;DR: We implement a meow-state for quick navigation of org-mode document structure.&#xA;I’ve been very pleased with my switch to the meow modal editor, but one of the downsides of it is no obvious way to use speed keys in org-mode. Namely, the meow normal state maps would clash with the speed key definitions. One could just redefine the speed keys to avoid the normal state maps, or redefine the normal state maps themselves, but that’s no fun.</description>
    </item>
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/computing/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.&#xA;For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/comp/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.&#xA;For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    <item>
      <title>My DOOM Emacs Configuration</title>
      <link>http://localhost:1313/computing/doom-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/doom-config/</guid>
      <description>Table of Contents Intro Housekeeping Font Theme, Appearance, General Behavior Doom Dashboard Modeline Global Appearance Custom Faces Custom Functionality Global keybindings Major Modes and Languages org-mode haskell-mode python-mode plantuml pdf-view-mode evil lsp numpydoc Packages bibtex embark org packages org-ref org-roam org-noter org-super-agenda CV Misc Packages and Behavior helm-bibtex xenops-mode yasnippets ink quiver company Intro This config file is organized by mode and/or package. Each mode has their own subsection for common configuration patterns such as keybindings, hooks, setting variables, etc.</description>
    </item>
    <item>
      <title>Consistent, Dynamic Access to Custom Emacs Theme Palettes with technicolor</title>
      <link>http://localhost:1313/comp/dyn_custom_palette_access_technicolor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/comp/dyn_custom_palette_access_technicolor/</guid>
      <description>In thinking of new ways to waste time with extend emacs, I thought back on my brief attempts to use the color values from the DOOM theme collection to customize various faces. Fortunately for me, accessing the current DOOM theme’s color palette from elisp is trivial using the function doom-color. Unfortunately for me, I don’t always have a DOOM theme active&amp;hellip;&#xA;Consider the following elisp:&#xA;(set-face-attribute org-verbatim nil :foreground (doom-color &amp;#39;green)) All this is set the font color for org verbatim text to the associated green color in the current DOOM theme.</description>
    </item>
  </channel>
</rss>
