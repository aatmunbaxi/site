<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computing on Aatmun Baxi</title>
    <link>http://localhost:1313/computing/</link>
    <description>Recent content in Computing on Aatmun Baxi</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/computing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring-meow-friendly-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/configuring-meow-friendly-latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.&#xA;Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:&#xA;Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    <item>
      <title>Configuring meow for Friendly LaTeX Editing</title>
      <link>http://localhost:1313/computing/configuring_meow_friendly_latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/configuring_meow_friendly_latex/</guid>
      <description>TL;DR: We implement some configuration to recover functionality possible in evil-tex in the meow modal editing scheme.&#xA;Having ditched evil-collection to get familiar with the default emacs keybindings, I found myself satsisfied with many of the facilities emacs provides out-of-the-box for editing text. Alas, I feel modal editing is something I prefer, so I switched to meow. I chose meow for a few reasons:&#xA;Trivial to extend and hack on The “selection-first” ethos is intriguing No dependencies Prefers built-in methods for various tasks Keypad mode offers a great, lighter weight alternative to the SPC DOOM leader with evil mode So far, it’s been an enjoyable experience, but one evil-mode package&amp;ndash;evil-tex&amp;ndash;gave me pause.</description>
    </item>
    <item>
      <title>Solving the Magic Square in Common Lisp</title>
      <link>http://localhost:1313/computing/magic-square-common-lisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/magic-square-common-lisp/</guid>
      <description>Table of Contents The Problem Helper Functions Summing List Values Converting Between Grids and Flat Lists Grabbing Diagonals Checking Win Conditions Range Generation Pretty Printing The Solver Using the Solver The Problem The magic square problem is a typical recursion exercise given to students learning programming. Since I’ve been playing around with common lisp recently, I thought I’d use it as an excuse to learn a bit about the language.</description>
    </item>
    <item>
      <title>Declarative Programming for Fast Brain-to-Binary</title>
      <link>http://localhost:1313/computing/brain_to_binary_bliss_of_decla_prog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/brain_to_binary_bliss_of_decla_prog/</guid>
      <description>Recently I’ve been messing around with different programming languages and branching out beyond the C-style languages I know like C++ and Python. In my search for one to try out, I discovered Haskell, and the paradigm of functional programming as a whole.&#xA;As a mathematician by trade, the usefulness of programming was never lost on me. From my time with C++ and Python, I had developed a (not unreasonable) notion that programming was all about telling computers how to do something you want done.</description>
    </item>
    <item>
      <title>Emacs org-mode for LaTeX</title>
      <link>http://localhost:1313/computing/emacs-to-type-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/emacs-to-type-latex/</guid>
      <description>About four years ago, my brother introduced me to Linux and free and open source software. Around the same time I learned to use LaTeX to typeset documents with lots of mathematical notation. I then stumbled across Gilles Castel’s article on typing LaTeX with vim, and I was amazed.&#xA;For those who don’t know, typing LaTeX by default is a terrible experience. Terrible. Using a program like vim with plugins made typing LaTeX so frictionless that I immediately dove into the world of extensible text editors.</description>
    </item>
    <item>
      <title>My DOOM Emacs Configuration</title>
      <link>http://localhost:1313/computing/doom-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/computing/doom-config/</guid>
      <description>Table of Contents Intro Housekeeping Font Theme, Appearance, General Behavior Doom Dashboard Modeline Global Appearance Custom Faces Custom Functionality Global keybindings Major Modes and Languages org-mode haskell-mode python-mode plantuml pdf-view-mode evil lsp numpydoc Packages bibtex embark org packages org-ref org-roam org-noter org-super-agenda CV Misc Packages and Behavior helm-bibtex xenops-mode yasnippets ink quiver company Intro This config file is organized by mode and/or package. Each mode has their own subsection for common configuration patterns such as keybindings, hooks, setting variables, etc.</description>
    </item>
  </channel>
</rss>
